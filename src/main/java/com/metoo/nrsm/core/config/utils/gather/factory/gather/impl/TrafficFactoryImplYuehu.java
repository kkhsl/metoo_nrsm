package com.metoo.nrsm.core.config.utils.gather.factory.gather.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.util.StringUtil;
import com.metoo.nrsm.core.config.application.ApplicationContextUtils;
import com.metoo.nrsm.core.config.utils.gather.factory.gather.FlowUtils;
import com.metoo.nrsm.core.config.utils.gather.factory.gather.Gather;
import com.metoo.nrsm.core.config.utils.gather.factory.gather.utils.GeneraFlowUtils;
import com.metoo.nrsm.core.config.utils.gather.utils.PyExecUtils;
import com.metoo.nrsm.core.service.IGatewayService;
import com.metoo.nrsm.core.service.IFlowUnitService;
import com.metoo.nrsm.entity.Gateway;
import com.metoo.nrsm.entity.FlowUnit;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
public class TrafficFactoryImplYuehu implements Gather {
    private static final Logger log = LoggerFactory.getLogger(TrafficFactoryImplYuehu.class);

    public TrafficFactoryImplYuehu() {
    }

    public void executeMethod() {
        log.info("Traffic start=========");
        IFlowUnitService flowUnitService = (IFlowUnitService)ApplicationContextUtils.getBean("flowUnitServiceImpl");
        IGatewayService gatewayService = (IGatewayService)ApplicationContextUtils.getBean("gatewayServiceImpl");
        PyExecUtils pyExecUtils = (PyExecUtils)ApplicationContextUtils.getBean("pyExecUtils");
        List<Gateway> list = gatewayService.selectObjByMap((Map)null);
        if (list.size() > 0) {
            Iterator var5 = list.iterator();

            while(var5.hasNext()) {
                Gateway gateway = (Gateway)var5.next();
                Map params = new HashMap();
                params.put("hidden", false);
                params.put("gatewayId", gateway.getId());
                List<FlowUnit> units = flowUnitService.selectObjByMap(params);
                Iterator var9 = units.iterator();

                while(var9.hasNext()) {
                    FlowUnit unit = (FlowUnit)var9.next();
                    this.insertTraffic(unit);
                    flowUnitService.update(unit);
                }
            }

            log.info("Traffic end =========");
        }

    }

    public void insertTraffic(FlowUnit unit) {
        double vfourFlowTotal = 0.0D;
        vfourFlowTotal = this.generateVfourFlowTotal(unit.getV4Traffic());
        double vfourFlow = this.generateV4(vfourFlowTotal);
        double vsixFlow = this.generateV6(vfourFlow, unit.getRandom());
        String formattedVfourFlow = "";
        String formattedVsixFlow = "";
        if (vfourFlow < 0.01D) {
            vfourFlow = 0.01D;
        }

        if (vsixFlow < 0.01D) {
            vsixFlow = 0.01D;
        }

        formattedVfourFlow = String.format("%.2f", vfourFlow);
        formattedVsixFlow = String.format("%.2f", vsixFlow);
        unit.setVfourFlow(formattedVfourFlow);
        unit.setVsixFlow(formattedVsixFlow);
        log.info("单位名称：{}  v4流量：{} v6流量：{}", new Object[]{unit.getUnitName(), formattedVfourFlow, formattedVsixFlow});
    }

    public void insertTraffic(String data, FlowUnit unit) {
        if (StringUtil.isNotEmpty(data)) {
            JSONArray jsonArray = JSONArray.parseArray(data);
            if (jsonArray.size() > 0) {
                double vfourFlowTotal = 0.0D;
                vfourFlowTotal = this.generateVfourFlowTotal(unit.getRandom());
                double vfourFlow = this.generateV4(vfourFlowTotal);
                double vsixFlow = this.generateV6(vfourFlow, unit.getRandom());
                String formattedVfourFlow = "";
                String formattedVsixFlow = "";
                if (vfourFlow < 0.01D) {
                    vfourFlow = 0.01D;
                }

                if (vsixFlow < 0.01D) {
                    vsixFlow = 0.01D;
                }

                formattedVfourFlow = String.format("%.2f", vfourFlow);
                formattedVsixFlow = String.format("%.2f", vsixFlow);
                unit.setVfourFlow(formattedVfourFlow);
                unit.setVsixFlow(formattedVsixFlow);
            }
        }

    }

    public double generateV6(double vfourFlow, String random) {
        double vsixFlow = 0.1D;
        if (StringUtil.isNotEmpty(random)) {
            vsixFlow = GeneraFlowUtils.generateV6(vfourFlow, random);
        } else {
            vsixFlow = GeneraFlowUtils.generateV6(vfourFlow);
        }

        return vsixFlow;
    }

    public double generateVfourFlowTotal(String randomRadius) {
        double vfourFlowTotal = GeneraFlowUtils.generatev4Traffic(randomRadius);
        if (FlowUtils.isWithinTimeRange()) {
            vfourFlowTotal /= 20.0D;
        }

        return vfourFlowTotal;
    }

    public double generateV4(double vfourFlow) {
        double min;
        double max;
        Random random;
        double randomNumber;
        if (FlowUtils.isWithinTimeRange()) {
            if (vfourFlow == 0.0D) {
                min = 0.1D;
                max = 1.0D;
                random = new Random();
                randomNumber = min + (max - min) * random.nextDouble();
                vfourFlow = randomNumber;
            } else {
                vfourFlow = vfourFlow / 2.0D * 5.0D / 1000000.0D;
                if (vfourFlow < 0.01D) {
                    vfourFlow = 0.01D;
                }
            }
        } else if (vfourFlow == 0.0D) {
            min = 1.0D;
            max = 10.0D;
            random = new Random();
            randomNumber = min + (max - min) * random.nextDouble();
            vfourFlow = randomNumber;
        } else {
            vfourFlow = vfourFlow / 2.0D * 5.0D / 1000000.0D;
            if (vfourFlow < 0.01D) {
                vfourFlow = 0.01D;
            }
        }

        return vfourFlow;
    }

    @Test
    public void test() {
        FlowUnit unit = new FlowUnit();
        unit.setRandom("35,45");
        unit.setRule("35");
        String result = "[{\"Type\": \"sum-ipv4-out\", \"1/7\": {\"1\": \"0\", \"2\": \"0\", \"3\": \"0\", \"4\": \"0\", \"5\": \"0\", \"6\": \"0\", \"7\": \"0\", \"8\": \"0\", \"9\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"75\": \"0\", \"76\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"1/8\": {\"1\": \"2675896\", \"2\": \"0\", \"3\": \"712\", \"4\": \"0\", \"5\": \"85648\", \"6\": \"0\", \"7\": \"1403848\", \"8\": \"0\", \"9\": \"14784\", \"10\": \"0\", \"11\": \"13886920\", \"12\": \"0\", \"13\": \"531960\", \"14\": \"0\", \"15\": \"13880\", \"16\": \"0\", \"17\": \"11136120\", \"18\": \"0\", \"19\": \"124424\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"9024\", \"24\": \"0\", \"25\": \"5152\", \"26\": \"0\", \"27\": \"1453632\", \"28\": \"0\", \"29\": \"139309176\", \"30\": \"0\", \"31\": \"3112360\", \"32\": \"0\", \"33\": \"1249624\", \"34\": \"0\", \"35\": \"18328\", \"36\": \"0\", \"37\": \"260336\", \"38\": \"0\", \"39\": \"2611896\", \"40\": \"0\", \"41\": \"1378192\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"6193680\", \"46\": \"0\", \"47\": \"5500880\", \"48\": \"0\", \"49\": \"1884440\", \"50\": \"0\", \"51\": \"8833512\", \"52\": \"0\", \"53\": \"7233704\", \"54\": \"0\", \"55\": \"2851248\", \"56\": \"0\", \"57\": \"4585136\", \"58\": \"0\", \"59\": \"1677888\", \"60\": \"0\", \"61\": \"30768\", \"62\": \"0\", \"63\": \"1046568\", \"64\": \"0\", \"65\": \"220576\", \"66\": \"0\", \"67\": \"947680\", \"68\": \"0\", \"69\": \"48\", \"70\": \"0\", \"71\": \"4904\", \"72\": \"0\", \"73\": \"450240\", \"74\": \"0\", \"75\": \"5069480\", \"76\": \"0\", \"77\": \"13891368\", \"81\": \"9632848\", \"83\": \"3914112\", \"85\": \"55456\", \"87\": \"112192\", \"89\": \"301448\", \"91\": \"2374952\", \"93\": \"1639192\", \"95\": \"123192\", \"97\": \"7768\", \"99\": \"507800\", \"101\": \"0\", \"103\": \"24809536\", \"107\": \"1845456\"}, \"2/7\": {\"1\": \"0\", \"2\": \"0\", \"3\": \"0\", \"4\": \"0\", \"5\": \"0\", \"6\": \"0\", \"7\": \"0\", \"8\": \"0\", \"9\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"75\": \"0\", \"76\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"2/8\": {\"1\": \"1515888\", \"2\": \"0\", \"3\": \"2448\", \"4\": \"0\", \"5\": \"14192\", \"6\": \"0\", \"7\": \"1130024\", \"8\": \"0\", \"9\": \"33024\", \"10\": \"0\", \"11\": \"10606312\", \"12\": \"0\", \"13\": \"100352\", \"14\": \"0\", \"15\": \"13616\", \"16\": \"0\", \"17\": \"6421368\", \"18\": \"0\", \"19\": \"140736\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"6000\", \"24\": \"0\", \"25\": \"5928\", \"26\": \"0\", \"27\": \"37968\", \"28\": \"0\", \"29\": \"167410656\", \"30\": \"0\", \"31\": \"2542720\", \"32\": \"0\", \"33\": \"1902368\", \"34\": \"0\", \"35\": \"12512\", \"36\": \"0\", \"37\": \"1175760\", \"38\": \"0\", \"39\": \"3437536\", \"40\": \"0\", \"41\": \"6655616\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"3025984\", \"46\": \"0\", \"47\": \"5232184\", \"48\": \"0\", \"49\": \"1117936\", \"50\": \"0\", \"51\": \"11399552\", \"52\": \"0\", \"53\": \"8103696\", \"54\": \"0\", \"55\": \"4692144\", \"56\": \"0\", \"57\": \"3111728\", \"58\": \"0\", \"59\": \"3715776\", \"60\": \"0\", \"61\": \"14144\", \"62\": \"0\", \"63\": \"496888\", \"64\": \"0\", \"65\": \"137232\", \"66\": \"0\", \"67\": \"412392\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"3112\", \"72\": \"0\", \"73\": \"5901960\", \"74\": \"0\", \"75\": \"11297808\", \"76\": \"0\", \"77\": \"16025112\", \"81\": \"4661616\", \"83\": \"8676264\", \"85\": \"49520\", \"87\": \"90528\", \"89\": \"186824\", \"91\": \"4087304\", \"93\": \"2823472\", \"95\": \"3265448\", \"97\": \"4936\", \"99\": \"334032\", \"101\": \"0\", \"103\": \"18699904\", \"107\": \"2240864\"}}, {\"Type\": \"sum-ipv6-out\", \"1/7\": {\"1\": \"0\", \"2\": \"0\", \"3\": \"0\", \"4\": \"0\", \"5\": \"0\", \"6\": \"0\", \"7\": \"0\", \"8\": \"0\", \"9\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"77\": \"0\", \"78\": \"0\", \"81\": \"0\", \"82\": \"0\", \"85\": \"0\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"0\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"0\", \"98\": \"0\", \"99\": \"0\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"0\", \"108\": \"0\"}, \"1/8\": {\"1\": \"952\", \"2\": \"0\", \"3\": \"0\", \"4\": \"0\", \"5\": \"600848\", \"6\": \"0\", \"7\": \"10704\", \"8\": \"0\", \"9\": \"0\", \"10\": \"0\", \"11\": \"1469240\", \"12\": \"0\", \"13\": \"1447536\", \"14\": \"0\", \"15\": \"1656\", \"16\": \"0\", \"17\": \"1993088\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"1992\", \"24\": \"0\", \"25\": \"1336\", \"26\": \"0\", \"27\": \"1604336\", \"28\": \"0\", \"29\": \"10096\", \"30\": \"0\", \"31\": \"7152\", \"32\": \"0\", \"33\": \"285776\", \"34\": \"0\", \"35\": \"2448\", \"36\": \"0\", \"37\": \"102368\", \"38\": \"0\", \"39\": \"27016\", \"40\": \"0\", \"41\": \"4048\", \"42\": \"0\", \"43\": \"80\", \"44\": \"0\", \"45\": \"54704\", \"46\": \"0\", \"47\": \"68032\", \"48\": \"0\", \"49\": \"83488\", \"50\": \"0\", \"51\": \"882688\", \"52\": \"0\", \"53\": \"10152\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"2176144\", \"58\": \"0\", \"59\": \"1064\", \"60\": \"0\", \"61\": \"4168512\", \"62\": \"0\", \"63\": \"2800\", \"64\": \"0\", \"65\": \"116952\", \"66\": \"0\", \"67\": \"1352\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"2912\", \"72\": \"0\", \"73\": \"1704\", \"74\": \"0\", \"77\": \"29832\", \"78\": \"0\", \"81\": \"5800\", \"82\": \"0\", \"85\": \"11928\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"1259224\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"272\", \"98\": \"0\", \"99\": \"674936\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"183448\", \"108\": \"0\"}, \"2/7\": {\"1\": \"0\", \"2\": \"0\", \"3\": \"0\", \"4\": \"0\", \"5\": \"0\", \"6\": \"0\", \"7\": \"0\", \"8\": \"0\", \"9\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"77\": \"0\", \"78\": \"0\", \"81\": \"0\", \"82\": \"0\", \"85\": \"0\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"0\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"0\", \"98\": \"0\", \"99\": \"0\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"0\", \"108\": \"0\"}, \"2/8\": {\"1\": \"888\", \"2\": \"0\", \"3\": \"120\", \"4\": \"0\", \"5\": \"371528\", \"6\": \"0\", \"7\": \"7160\", \"8\": \"0\", \"9\": \"0\", \"10\": \"0\", \"11\": \"1470288\", \"12\": \"0\", \"13\": \"912424\", \"14\": \"0\", \"15\": \"1944\", \"16\": \"0\", \"17\": \"941392\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"5776\", \"24\": \"0\", \"25\": \"1928\", \"26\": \"0\", \"27\": \"302672\", \"28\": \"0\", \"29\": \"13760\", \"30\": \"0\", \"31\": \"9072\", \"32\": \"0\", \"33\": \"344032\", \"34\": \"0\", \"35\": \"2560\", \"36\": \"0\", \"37\": \"7648\", \"38\": \"0\", \"39\": \"1152904\", \"40\": \"0\", \"41\": \"4968\", \"42\": \"0\", \"43\": \"232\", \"44\": \"0\", \"45\": \"45192\", \"46\": \"0\", \"47\": \"137568\", \"48\": \"0\", \"49\": \"199608\", \"50\": \"0\", \"51\": \"2677720\", \"52\": \"0\", \"53\": \"18160\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"9409912\", \"58\": \"0\", \"59\": \"4704\", \"60\": \"0\", \"61\": \"1040\", \"62\": \"0\", \"63\": \"27672\", \"64\": \"0\", \"65\": \"298208\", \"66\": \"0\", \"67\": \"296\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"86424\", \"72\": \"0\", \"73\": \"47792\", \"74\": \"0\", \"77\": \"512\", \"78\": \"0\", \"81\": \"8112\", \"82\": \"0\", \"85\": \"291312\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"1725008\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"200\", \"98\": \"0\", \"99\": \"24376\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"271984\", \"108\": \"0\"}}, {\"Type\": \"sum-ipv4-in\", \"1/7\": {\"1\": \"0\", \"3\": \"0\", \"5\": \"0\", \"7\": \"0\", \"9\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"75\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"1/8\": {\"1\": \"34800\", \"3\": \"2352\", \"5\": \"3256\", \"7\": \"316704\", \"9\": \"15640\", \"11\": \"2897520\", \"13\": \"83368\", \"15\": \"18976\", \"17\": \"693128\", \"19\": \"0\", \"21\": \"0\", \"23\": \"49480\", \"25\": \"5336\", \"27\": \"1496\", \"29\": \"7900968\", \"31\": \"394016\", \"33\": \"119224\", \"35\": \"15568\", \"37\": \"741488\", \"39\": \"401192\", \"41\": \"660624\", \"43\": \"0\", \"45\": \"593728\", \"47\": \"415216\", \"49\": \"19110440\", \"51\": \"139888\", \"53\": \"751768\", \"55\": \"3638664\", \"57\": \"307632\", \"59\": \"470872\", \"61\": \"78440\", \"63\": \"158392\", \"65\": \"271680\", \"67\": \"133208\", \"69\": \"40\", \"71\": \"264\", \"73\": \"335880\", \"75\": \"453208\", \"77\": \"1251032\", \"81\": \"65472\", \"83\": \"1154872\", \"85\": \"39184\", \"87\": \"42112\", \"89\": \"399312\", \"91\": \"408880\", \"93\": \"3656144\", \"95\": \"112424\", \"97\": \"30048\", \"99\": \"1389744\", \"101\": \"0\", \"103\": \"820104\", \"107\": \"132592\"}, \"2/7\": {\"1\": \"0\", \"3\": \"0\", \"5\": \"0\", \"7\": \"0\", \"9\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"75\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"2/8\": {\"1\": \"37184\", \"3\": \"0\", \"5\": \"67080\", \"7\": \"0\", \"9\": \"0\", \"11\": \"0\", \"13\": \"59256\", \"15\": \"0\", \"17\": \"872536\", \"19\": \"77392\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"147280\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"508144\", \"47\": \"404360\", \"49\": \"4832\", \"51\": \"2342216\", \"53\": \"736816\", \"55\": \"0\", \"57\": \"3845496\", \"59\": \"157920\", \"61\": \"0\", \"63\": \"11808\", \"65\": \"48664\", \"67\": \"0\", \"69\": \"0\", \"71\": \"8200\", \"73\": \"124352\", \"75\": \"294552\", \"77\": \"0\", \"81\": \"217440\", \"83\": \"0\", \"85\": \"16760\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"28000\", \"95\": \"0\", \"97\": \"0\", \"99\": \"6568\", \"101\": \"0\", \"103\": \"0\", \"107\": \"5672\"}}, {\"Type\": \"sum-ipv6-in\", \"1/7\": {\"1\": \"0\", \"3\": \"0\", \"5\": \"0\", \"7\": \"0\", \"9\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"77\": \"0\", \"81\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"107\": \"0\"}, \"1/8\": {\"1\": \"0\", \"3\": \"616\", \"5\": \"20120\", \"7\": \"24416\", \"9\": \"0\", \"11\": \"1457496\", \"13\": \"242904\", \"15\": \"5712\", \"17\": \"960000\", \"19\": \"0\", \"21\": \"0\", \"23\": \"4648\", \"25\": \"1216\", \"27\": \"94160\", \"29\": \"178920\", \"31\": \"8192\", \"33\": \"46136\", \"35\": \"4896\", \"37\": \"12056\", \"39\": \"51984\", \"41\": \"81608\", \"43\": \"696\", \"45\": \"61576\", \"47\": \"50872\", \"49\": \"71168\", \"51\": \"208376\", \"53\": \"984\", \"55\": \"0\", \"57\": \"864336\", \"59\": \"8760\", \"61\": \"32976\", \"63\": \"14792\", \"65\": \"86976\", \"67\": \"688\", \"69\": \"0\", \"71\": \"816\", \"73\": \"1480\", \"77\": \"50736\", \"81\": \"4784\", \"85\": \"9520\", \"87\": \"0\", \"89\": \"0\", \"93\": \"253128\", \"95\": \"0\", \"97\": \"2776\", \"99\": \"53752\", \"101\": \"0\", \"107\": \"46696\"}, \"2/7\": {\"1\": \"0\", \"3\": \"0\", \"5\": \"0\", \"7\": \"0\", \"9\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"77\": \"0\", \"81\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"107\": \"0\"}, \"2/8\": {\"1\": \"4048\", \"3\": \"0\", \"5\": \"30080\", \"7\": \"0\", \"9\": \"0\", \"11\": \"0\", \"13\": \"38256\", \"15\": \"0\", \"17\": \"279088\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"33120\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"720\", \"45\": \"0\", \"47\": \"4080\", \"49\": \"0\", \"51\": \"47024\", \"53\": \"8560\", \"55\": \"0\", \"57\": \"168816\", \"59\": \"2224\", \"61\": \"0\", \"63\": \"392\", \"65\": \"106720\", \"67\": \"0\", \"69\": \"0\", \"71\": \"18816\", \"73\": \"6680\", \"77\": \"0\", \"81\": \"1888\", \"85\": \"29480\", \"87\": \"0\", \"89\": \"0\", \"93\": \"247848\", \"95\": \"0\", \"97\": \"0\", \"99\": \"15888\", \"101\": \"0\", \"107\": \"1904\"}}]\n";
        this.insertTraffic(result, unit);
    }

    public static void main(String[] args) {
        double vfourFlow = 0.29D;
        double vsixFlow = 0.0D;
        String randomStr = "45,55";
        if (vfourFlow == 0.0D) {
            double min = 1.0D;
            double max = 10.0D;
            Random random = new Random();
            double randomNumber = min + (max - min) * random.nextDouble();
            vfourFlow = randomNumber;
            if (StringUtil.isNotEmpty(randomStr)) {
                vsixFlow = GeneraFlowUtils.generateV6(randomNumber, randomStr);
            } else {
                vsixFlow = GeneraFlowUtils.generateV6(randomNumber);
            }
        } else if (StringUtil.isNotEmpty(randomStr)) {
            vsixFlow = GeneraFlowUtils.generateV6(vfourFlow, randomStr);
        } else {
            vsixFlow = GeneraFlowUtils.generateV6(vfourFlow);
        }

        String formattedVfourFlow = String.format("%.2f", vfourFlow);
        String formattedVsixFlow = String.format("%.2f", vsixFlow);
        System.out.println("vfour: " + formattedVfourFlow);
        System.out.println("vsixFlow: " + formattedVsixFlow);
    }

    public static void insertTraffic(String data, String rule) {
        if (StringUtil.isNotEmpty(data)) {
            JSONArray jsonArray = JSONArray.parseArray(data);
            if (jsonArray.size() > 0) {
                double vfourFlow = 0.0D;
                double vsixFlow = 0.0D;

                for(int i = 0; i < jsonArray.size(); ++i) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    if (jsonObject.get("Type") != null && jsonObject.get("Type").equals("sum-ipv4-in")) {
                        Iterator var9 = jsonObject.keySet().iterator();

                        while(var9.hasNext()) {
                            String key = (String)var9.next();
                            if (jsonObject.get(key) instanceof JSONObject) {
                                JSONObject nestedObject = jsonObject.getJSONObject(key);
                                if (nestedObject.containsKey(rule)) {
                                    vfourFlow += Double.parseDouble(nestedObject.getString(rule));
                                }
                            }
                        }
                    }
                }

                String formattedVfourFlow = "";
                String formattedVsixFlow = "";
                Random random;
                double randomNumber;
                double min;
                double max;
                if (FlowUtils.isWithinTimeRange()) {
                    if (vfourFlow == 0.0D) {
                        min = 0.1D;
                        max = 1.0D;
                        random = new Random();
                        randomNumber = min + (max - min) * random.nextDouble();
                        vfourFlow = randomNumber;
                        vsixFlow = GeneraFlowUtils.generateV6(randomNumber);
                    } else {
                        vfourFlow = vfourFlow / 2.0D * 5.0D / 1000000.0D;
                        vsixFlow = GeneraFlowUtils.generateV6(vfourFlow);
                    }
                } else if (vfourFlow == 0.0D) {
                    min = 1.0D;
                    max = 10.0D;
                    random = new Random();
                    randomNumber = min + (max - min) * random.nextDouble();
                    vfourFlow = randomNumber;
                    vsixFlow = GeneraFlowUtils.generateV6(randomNumber);
                } else {
                    vsixFlow = GeneraFlowUtils.generateV6(vfourFlow);
                    vfourFlow = vfourFlow / 2.0D * 5.0D / 1000000.0D;
                    vsixFlow = vsixFlow / 2.0D * 5.0D / 1000000.0D;
                }

                formattedVfourFlow = String.format("%.2f", vfourFlow);
                formattedVsixFlow = String.format("%.2f", vsixFlow);
                System.out.println(formattedVfourFlow);
                System.out.println(formattedVsixFlow);
            }
        }

    }
}
