package com.metoo.nrsm.core.utils.string;

import com.alibaba.fastjson.JSONArray;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 */
@Component
public class MyStringUtils {

    public static boolean isNonEmptyAndTrimmed(String str) {
        return str != null && !str.trim().isEmpty();
    }

    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static void main(String[] args) {
        String result = "[{\"Type\": \"sum-ipv4-out\", \"1/7\": {\"1p\": \"0\", \"2p\": \"0\", \"3p\": \"0\", \"4p\": \"0\", \"5p\": \"0\", \"6p\": \"0\", \"7p\": \"0\", \"8p\": \"0\", \"9p\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"75\": \"0\", \"76\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"1/8\": {\"1p\": \"2240\", \"2p\": \"0\", \"3p\": \"864\", \"4p\": \"0\", \"5p\": \"1888\", \"6p\": \"0\", \"7p\": \"331616\", \"8p\": \"0\", \"9p\": \"3392\", \"10\": \"0\", \"11\": \"40112\", \"12\": \"0\", \"13\": \"19256\", \"14\": \"0\", \"15\": \"13752\", \"16\": \"0\", \"17\": \"283032\", \"18\": \"0\", \"19\": \"4264\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"2712\", \"24\": \"0\", \"25\": \"264\", \"26\": \"0\", \"27\": \"2432\", \"28\": \"0\", \"29\": \"23160\", \"30\": \"0\", \"31\": \"19312\", \"32\": \"0\", \"33\": \"512\", \"34\": \"0\", \"35\": \"7880\", \"36\": \"0\", \"37\": \"1880\", \"38\": \"0\", \"39\": \"8840\", \"40\": \"0\", \"41\": \"2416\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"35736\", \"46\": \"0\", \"47\": \"23272\", \"48\": \"0\", \"49\": \"18280\", \"50\": \"0\", \"51\": \"1192704\", \"52\": \"0\", \"53\": \"9424\", \"54\": \"0\", \"55\": \"22656\", \"56\": \"0\", \"57\": \"57424\", \"58\": \"0\", \"59\": \"5952\", \"60\": \"0\", \"61\": \"952\", \"62\": \"0\", \"63\": \"5856\", \"64\": \"0\", \"65\": \"14960\", \"66\": \"0\", \"67\": \"1120\", \"68\": \"0\", \"69\": \"56\", \"70\": \"0\", \"71\": \"528\", \"72\": \"0\", \"73\": \"12240\", \"74\": \"0\", \"75\": \"809880\", \"76\": \"0\", \"77\": \"252208\", \"81\": \"11296\", \"83\": \"41664\", \"85\": \"11824\", \"87\": \"1176\", \"89\": \"80\", \"91\": \"24728\", \"93\": \"163992\", \"95\": \"6136\", \"97\": \"552\", \"99\": \"19728\", \"101\": \"0\", \"103\": \"5882872\", \"107\": \"71568\"}, \"2/7\": {\"1p\": \"0\", \"2p\": \"0\", \"3p\": \"0\", \"4p\": \"0\", \"5p\": \"0\", \"6p\": \"0\", \"7p\": \"0\", \"8p\": \"0\", \"9p\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"75\": \"0\", \"76\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"2/8\": {\"1p\": \"1064\", \"2p\": \"0\", \"3p\": \"520\", \"4p\": \"0\", \"5p\": \"3872\", \"6p\": \"0\", \"7p\": \"42192\", \"8p\": \"0\", \"9p\": \"5016\", \"10\": \"0\", \"11\": \"146848\", \"12\": \"0\", \"13\": \"15152\", \"14\": \"0\", \"15\": \"13640\", \"16\": \"0\", \"17\": \"160512\", \"18\": \"0\", \"19\": \"720\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"736\", \"24\": \"0\", \"25\": \"656\", \"26\": \"0\", \"27\": \"3744\", \"28\": \"0\", \"29\": \"52824\", \"30\": \"0\", \"31\": \"11872\", \"32\": \"0\", \"33\": \"1080\", \"34\": \"0\", \"35\": \"6640\", \"36\": \"0\", \"37\": \"3232\", \"38\": \"0\", \"39\": \"5408\", \"40\": \"0\", \"41\": \"6864\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"45272\", \"46\": \"0\", \"47\": \"10856\", \"48\": \"0\", \"49\": \"17096\", \"50\": \"0\", \"51\": \"57184\", \"52\": \"0\", \"53\": \"9112\", \"54\": \"0\", \"55\": \"42288\", \"56\": \"0\", \"57\": \"243552\", \"58\": \"0\", \"59\": \"21312\", \"60\": \"0\", \"61\": \"5664\", \"62\": \"0\", \"63\": \"4400\", \"64\": \"0\", \"65\": \"20056\", \"66\": \"0\", \"67\": \"1160\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"488\", \"72\": \"0\", \"73\": \"33408\", \"74\": \"0\", \"75\": \"736920\", \"76\": \"0\", \"77\": \"164880\", \"81\": \"6744\", \"83\": \"26424\", \"85\": \"8568\", \"87\": \"4880\", \"89\": \"0\", \"91\": \"12032\", \"93\": \"17152\", \"95\": \"9720\", \"97\": \"4136\", \"99\": \"8200\", \"101\": \"0\", \"103\": \"6297344\", \"107\": \"7312\"}}, {\"Type\": \"sum-ipv6-out\", \"1/7\": {\"1p\": \"0\", \"2p\": \"0\", \"3p\": \"0\", \"4p\": \"0\", \"5p\": \"0\", \"6p\": \"0\", \"7p\": \"0\", \"8p\": \"0\", \"9p\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"77\": \"0\", \"78\": \"0\", \"81\": \"0\", \"82\": \"0\", \"85\": \"0\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"0\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"0\", \"98\": \"0\", \"99\": \"0\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"0\", \"108\": \"0\"}, \"1/8\": {\"1p\": \"0\", \"2p\": \"0\", \"3p\": \"0\", \"4p\": \"0\", \"5p\": \"0\", \"6p\": \"0\", \"7p\": \"200\", \"8p\": \"0\", \"9p\": \"0\", \"10\": \"0\", \"11\": \"1040\", \"12\": \"0\", \"13\": \"2248\", \"14\": \"0\", \"15\": \"60560\", \"16\": \"0\", \"17\": \"3216\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"4096\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"3200\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"608\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"456\", \"40\": \"0\", \"41\": \"424\", \"42\": \"0\", \"43\": \"376\", \"44\": \"0\", \"45\": \"1168\", \"46\": \"0\", \"47\": \"1344\", \"48\": \"0\", \"49\": \"104\", \"50\": \"0\", \"51\": \"1904\", \"52\": \"0\", \"53\": \"728\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"147480\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"200\", \"64\": \"0\", \"65\": \"1608\", \"66\": \"0\", \"67\": \"80\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"1616\", \"74\": \"0\", \"77\": \"0\", \"78\": \"0\", \"81\": \"0\", \"82\": \"0\", \"85\": \"48\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"4912\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"96\", \"98\": \"0\", \"99\": \"0\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"0\", \"108\": \"0\"}, \"2/7\": {\"1p\": \"0\", \"2p\": \"0\", \"3p\": \"0\", \"4p\": \"0\", \"5p\": \"0\", \"6p\": \"0\", \"7p\": \"0\", \"8p\": \"0\", \"9p\": \"0\", \"10\": \"0\", \"11\": \"0\", \"12\": \"0\", \"13\": \"0\", \"14\": \"0\", \"15\": \"0\", \"16\": \"0\", \"17\": \"0\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"0\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"0\", \"28\": \"0\", \"29\": \"0\", \"30\": \"0\", \"31\": \"0\", \"32\": \"0\", \"33\": \"0\", \"34\": \"0\", \"35\": \"0\", \"36\": \"0\", \"37\": \"0\", \"38\": \"0\", \"39\": \"0\", \"40\": \"0\", \"41\": \"0\", \"42\": \"0\", \"43\": \"0\", \"44\": \"0\", \"45\": \"0\", \"46\": \"0\", \"47\": \"0\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"0\", \"52\": \"0\", \"53\": \"0\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"0\", \"58\": \"0\", \"59\": \"0\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"0\", \"64\": \"0\", \"65\": \"0\", \"66\": \"0\", \"67\": \"0\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"0\", \"72\": \"0\", \"73\": \"0\", \"74\": \"0\", \"77\": \"0\", \"78\": \"0\", \"81\": \"0\", \"82\": \"0\", \"85\": \"0\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"0\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"0\", \"98\": \"0\", \"99\": \"0\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"0\", \"108\": \"0\"}, \"2/8\": {\"1p\": \"592\", \"2p\": \"0\", \"3p\": \"0\", \"4p\": \"0\", \"5p\": \"0\", \"6p\": \"0\", \"7p\": \"288\", \"8p\": \"0\", \"9p\": \"0\", \"10\": \"0\", \"11\": \"440\", \"12\": \"0\", \"13\": \"3208\", \"14\": \"0\", \"15\": \"19808\", \"16\": \"0\", \"17\": \"6696\", \"18\": \"0\", \"19\": \"0\", \"20\": \"0\", \"21\": \"0\", \"22\": \"0\", \"23\": \"10048\", \"24\": \"0\", \"25\": \"0\", \"26\": \"0\", \"27\": \"328\", \"28\": \"0\", \"29\": \"280\", \"30\": \"0\", \"31\": \"216\", \"32\": \"0\", \"33\": \"160\", \"34\": \"0\", \"35\": \"400\", \"36\": \"0\", \"37\": \"16\", \"38\": \"0\", \"39\": \"104\", \"40\": \"0\", \"41\": \"56\", \"42\": \"0\", \"43\": \"248\", \"44\": \"0\", \"45\": \"152\", \"46\": \"0\", \"47\": \"56\", \"48\": \"0\", \"49\": \"0\", \"50\": \"0\", \"51\": \"1760\", \"52\": \"0\", \"53\": \"3776\", \"54\": \"0\", \"55\": \"0\", \"56\": \"0\", \"57\": \"263016\", \"58\": \"0\", \"59\": \"82464\", \"60\": \"0\", \"61\": \"0\", \"62\": \"0\", \"63\": \"104\", \"64\": \"0\", \"65\": \"37024\", \"66\": \"0\", \"67\": \"736\", \"68\": \"0\", \"69\": \"0\", \"70\": \"0\", \"71\": \"104\", \"72\": \"0\", \"73\": \"4328\", \"74\": \"0\", \"77\": \"0\", \"78\": \"0\", \"81\": \"64\", \"82\": \"0\", \"85\": \"0\", \"86\": \"0\", \"87\": \"0\", \"88\": \"0\", \"89\": \"0\", \"90\": \"0\", \"93\": \"2264\", \"94\": \"0\", \"95\": \"0\", \"96\": \"0\", \"97\": \"0\", \"98\": \"0\", \"99\": \"0\", \"100\": \"0\", \"101\": \"0\", \"102\": \"0\", \"107\": \"0\", \"108\": \"0\"}}, {\"Type\": \"sum-ipv4-in\", \"1/7\": {\"1p\": \"0\", \"3p\": \"0\", \"5p\": \"0\", \"7p\": \"0\", \"9p\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"75\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"1/8\": {\"1p\": \"2632\", \"3p\": \"616\", \"5p\": \"1216\", \"7p\": \"37256\", \"9p\": \"5512\", \"11\": \"17288\", \"13\": \"7696\", \"15\": \"10976\", \"17\": \"13456\", \"19\": \"0\", \"21\": \"0\", \"23\": \"2616\", \"25\": \"0\", \"27\": \"1320\", \"29\": \"25928\", \"31\": \"16432\", \"33\": \"728\", \"35\": \"13760\", \"37\": \"4496\", \"39\": \"9592\", \"41\": \"10136\", \"43\": \"0\", \"45\": \"31888\", \"47\": \"6216\", \"49\": \"14568\", \"51\": \"21640\", \"53\": \"9720\", \"55\": \"25856\", \"57\": \"16352\", \"59\": \"9952\", \"61\": \"3912\", \"63\": \"5000\", \"65\": \"19632\", \"67\": \"1520\", \"69\": \"56\", \"71\": \"752\", \"73\": \"5064\", \"75\": \"5944\", \"77\": \"57304\", \"81\": \"11040\", \"83\": \"337696\", \"85\": \"7936\", \"87\": \"2976\", \"89\": \"32\", \"91\": \"16576\", \"93\": \"21368\", \"95\": \"7536\", \"97\": \"2896\", \"99\": \"2840\", \"101\": \"0\", \"103\": \"4528\", \"107\": \"9952\"}, \"2/7\": {\"1p\": \"0\", \"3p\": \"0\", \"5p\": \"0\", \"7p\": \"0\", \"9p\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"75\": \"0\", \"77\": \"0\", \"81\": \"0\", \"83\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"103\": \"0\", \"107\": \"0\"}, \"2/8\": {\"1p\": \"872\", \"3p\": \"0\", \"5p\": \"712\", \"7p\": \"0\", \"9p\": \"0\", \"11\": \"0\", \"13\": \"11488\", \"15\": \"0\", \"17\": \"23208\", \"19\": \"2752\", \"21\": \"0\", \"23\": \"0\", \"25\": \"1240\", \"27\": \"2512\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"4224\", \"47\": \"7568\", \"49\": \"2184\", \"51\": \"30720\", \"53\": \"6896\", \"55\": \"0\", \"57\": \"56176\", \"59\": \"4640\", \"61\": \"0\", \"63\": \"136\", \"65\": \"2584\", \"67\": \"0\", \"69\": \"0\", \"71\": \"16\", \"73\": \"8272\", \"75\": \"1016576\", \"77\": \"0\", \"81\": \"4816\", \"83\": \"0\", \"85\": \"2520\", \"87\": \"0\", \"89\": \"0\", \"91\": \"0\", \"93\": \"5992\", \"95\": \"0\", \"97\": \"0\", \"99\": \"7696\", \"101\": \"0\", \"103\": \"0\", \"107\": \"3144\"}}, {\"Type\": \"sum-ipv6-in\", \"1/7\": {\"1p\": \"0\", \"3p\": \"0\", \"5p\": \"0\", \"7p\": \"0\", \"9p\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"77\": \"0\", \"81\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"107\": \"0\"}, \"1/8\": {\"1p\": \"0\", \"3p\": \"0\", \"5p\": \"0\", \"7p\": \"0\", \"9p\": \"0\", \"11\": \"76120\", \"13\": \"0\", \"15\": \"214168\", \"17\": \"28480\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"1744\", \"31\": \"0\", \"33\": \"0\", \"35\": \"2104\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"54984\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"77\": \"0\", \"81\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"107\": \"0\"}, \"2/7\": {\"1p\": \"0\", \"3p\": \"0\", \"5p\": \"0\", \"7p\": \"0\", \"9p\": \"0\", \"11\": \"0\", \"13\": \"0\", \"15\": \"0\", \"17\": \"0\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"0\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"0\", \"45\": \"0\", \"47\": \"0\", \"49\": \"0\", \"51\": \"0\", \"53\": \"0\", \"55\": \"0\", \"57\": \"0\", \"59\": \"0\", \"61\": \"0\", \"63\": \"0\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"77\": \"0\", \"81\": \"0\", \"85\": \"0\", \"87\": \"0\", \"89\": \"0\", \"93\": \"0\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"107\": \"0\"}, \"2/8\": {\"1p\": \"1976\", \"3p\": \"0\", \"5p\": \"0\", \"7p\": \"0\", \"9p\": \"0\", \"11\": \"0\", \"13\": \"3128\", \"15\": \"0\", \"17\": \"560\", \"19\": \"0\", \"21\": \"0\", \"23\": \"0\", \"25\": \"0\", \"27\": \"520\", \"29\": \"0\", \"31\": \"0\", \"33\": \"0\", \"35\": \"0\", \"37\": \"0\", \"39\": \"0\", \"41\": \"0\", \"43\": \"256\", \"45\": \"1248\", \"47\": \"720\", \"49\": \"0\", \"51\": \"16\", \"53\": \"3544\", \"55\": \"0\", \"57\": \"17080\", \"59\": \"221600\", \"61\": \"0\", \"63\": \"376\", \"65\": \"0\", \"67\": \"0\", \"69\": \"0\", \"71\": \"0\", \"73\": \"0\", \"77\": \"0\", \"81\": \"88\", \"85\": \"104\", \"87\": \"0\", \"89\": \"0\", \"93\": \"1472\", \"95\": \"0\", \"97\": \"0\", \"99\": \"0\", \"101\": \"0\", \"107\": \"0\"}}]\n";
        System.out.println(MyStringUtils.isValidJson(result));
        JSONArray jsonArray = JSONArray.parseArray(result);
        System.out.println(jsonArray);
    }

    public static boolean isValidJson(String result) {
        if (StringUtils.isNotEmpty(result)) {
            try {
                objectMapper.readTree(result);
                return true;
            } catch (IOException e) {
                // 处理 JSON 转换异常
                return false;
            }
        }
        return false;
    }


    // 方式二：Character
    public static boolean isDigit(String value){

        for (int i = value.length(); --i >= 0;){
            System.out.println(value.charAt(i));
            if (!Character.isDigit(value.charAt(i))){

                return false;
            }

        }
        return true;
    }

    public static String getStr(String s) {
        if (s == null) {
            return "";
        }
        if (s.isEmpty()) {
            return s;
        }
        return s.trim();
    }

    /**
     * 测试指定字符串出现的位置
     */
    public static void acquireCharacterPosition() {
        int i = acquireCharacterPositions("00", ":", 1);
        System.out.println(i);
    }


    /**
     * 获取指定字符第N次出现的位置(下标)
     * @return
     */
    public static int acquireCharacterPositions(String param, String symbol, int num){
        if(StringUtils.isBlank(param)){
            return -1;
        }
        boolean flag = false;
        if(symbol.equals(".")){
            flag = true;
        }
        if(param.contains(symbol) && param.indexOf(symbol) != -1){
            flag = true;
        }
        if(flag){
            Pattern pattern = Pattern.compile(symbol);
            Matcher findMatcher = pattern.matcher(param);
            List<Integer> list = new ArrayList();
            while(findMatcher.find()) {
                list.add(findMatcher.start());
            }
            return list.get(num - 1);
        }
        return -1;
    }

    /**
     * 获取指定字符串出现的次数
     *
     * @param srcText 源字符串
     * @param findText 要查找的字符串
     * @return
     */
    public static int appearNumber(String srcText, String findText) {
        int count = 0;
        Pattern p = Pattern.compile(findText);
        Matcher m = p.matcher(srcText);
        while (m.find()) {
            count++;
        }
        return count;
    }

    @Test
    public void t(){
        System.out.println("输出整型数组:");
        Integer[] integerArray = { 1, 2, 3, 4, 5, 6 };
        for (Integer element : integerArray){
            System.out.printf("%s ", element);
            System.out.println();
        }

    }
    static  class MainClass{
        public static void main(String[] args) {
            int nDisks = 4;
            doTowers(nDisks, 'A', 'B', 'C');
        }
        public static void doTowers(int topN, char from, char inter, char to) {
            if (topN == 1){
                System.out.println("Disk 1 from "
                        + from + " to " + to);
            }else {
                doTowers(topN - 1, from, to, inter);
                System.out.println("Disk "
                        + topN + " from " + from + " to " + to);
                doTowers(topN - 1, inter, from, to);
            }
        }
    }

    @Test
    public void str2listTest() {
        String s = "a\nb";
        List<String> c = null;
        try {
            c = str2list(s);
            System.out.println(c);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 用来处理一行一条数据
     *
     * @param s
     * @return
     * @throws IOException
     */
    public static List<String> str2list(String s) throws IOException {
        List<String> list = new ArrayList<String>();
        s = null2String(s);
        if (!s.equals("")) {
            StringReader fr = new StringReader(s);
            BufferedReader br = new BufferedReader(fr);
            String aline = "";
            while ((aline = br.readLine()) != null) {
                list.add(aline);
            }
        }
        return list;
    }

    public static String null2String(Object s) {
        return s == null ? "" : s.toString().trim();
    }

}
